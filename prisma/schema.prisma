// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id Int @id @default(autoincrement())
  nome String
  cpf String @unique
  email String @unique
  password String
  lotacao String?
  matricula String? @unique
  admin Boolean @default(false)
}

model RequisicaoPix {
  id  Int @id @default(autoincrement())
  data  DateTime
  cpfResponsavel String
  lotacao String?
  caso String?
  tipoBusca String
  chaveBusca  String
  motivoBusca String
  resultado String
  vinculos  Json?
  chaves ChavePix[]
  autorizado Boolean
  cpfAutorizacao String?
  nomeAutorizacao String?
  dataHoraAutorizacao String?
  tokenAutorizacao String?
}

model ChavePix {
  id  Int @id @default(autoincrement())
  chave	String?
  tipoChave	String?
  status String?
  dataAberturaReivindicacao String?
  cpfCnpj	String?
  nomeProprietario String?
  nomeFantasia String?
  participante String?
  agencia	String?
  numeroConta String?
  tipoConta String?
  dataAberturaConta String?
  proprietarioDaChaveDesde String?
  dataCriacao String?
  ultimaModificacao  String?
  numeroBanco String?
  nomeBanco String?
  cpfCnpjBusca String?
  nomeProprietarioBusca String?
  requisicaoPix RequisicaoPix?@relation(fields: [idRequisicao], references: [id])
  idRequisicao Int
  @@unique([chave, idRequisicao])
  eventosVinculo EventoChavePix[]
}

model EventoChavePix {
  id  Int @id @default(autoincrement())
  tipoEvento String?
  motivoEvento String?
  dataEvento String?
  chave String?
  tipoChave String?
  cpfCnpj String?
  nomeProprietario String?
  nomeFantasia String?
  participante String?
  agencia String?
  numeroConta String?
  tipoConta String?
  dataAberturaConta String?
  numeroBanco String?
  nomeBanco String?
  chavePix ChavePix?@relation(fields: [idChave], references: [id])
  idChave Int
}

model RequisicaoRelacionamentoCCS {
  id  Int @id @default(autoincrement())
  dataRequisicao  String
  dataInicioConsulta String
  dataFimConsulta String
  cpfCnpjConsulta String
  numeroProcesso String
  motivoBusca String
  cpfResponsavel String
  lotacao String?
  caso String?
  numeroRequisicao String
  cpfCnpj String
	tipoPessoa String
	nome String
  relacionamentosCCS RelacionamentoCCS[]
  autorizado Boolean
  cpfAutorizacao String?
  nomeAutorizacao String?
  dataHoraAutorizacao String?
  tokenAutorizacao String?
  status String
  detalhamento Boolean @default(false)
}

model RelacionamentoCCS {
  id  Int @id @default(autoincrement())
  numeroRequisicao String
  idPessoa String
  nomePessoa String
  tipoPessoa String
  cnpjResponsavel String
  numeroBancoResponsavel String
  nomeBancoResponsavel String
  cnpjParticipante String
  numeroBancoParticipante String
  nomeBancoParticipante String
  dataInicioRelacionamento String
  dataFimRelacionamento String?
  requisicaoRelacionamentoCCS RequisicaoRelacionamentoCCS?@relation(fields: [idRequisicao], references: [id])
  idRequisicao  Int
  dataRequisicaoDetalhamento String?
  statusDetalhamento String @default("Nao Solicitado")
  respondeDetalhamento Boolean?
  resposta Boolean @default(false)
  codigoResposta String?
	codigoIfResposta String?
  nuopResposta String?
  bemDireitoValorCCS BemDireitoValorCCS[]
}

model BemDireitoValorCCS {
  id  Int @id @default(autoincrement())
  cnpjParticipante String
  tipo String
  agencia String
  conta String
  vinculo String
  nomePessoa String
  dataInicio String
  dataFim String?
  relacionamento RelacionamentoCCS?@relation(fields: [idRelacionamento], references: [id])
  idRelacionamento  Int
  vinculados VinculadosBDVCCS[]
}

model VinculadosBDVCCS {
  id  Int @id @default(autoincrement())
  bemDireitoValor BemDireitoValorCCS?@relation(fields: [idBDV], references: [id])
  idBDV  Int
  dataInicio String
  dataFim String?
  idPessoa String
  nomePessoa String
  nomePessoaReceita String
  tipo String
}